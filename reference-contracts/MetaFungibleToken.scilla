scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils ListUtils

library MetaFungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeChequeVoid
| CodeSignatureInvalid
| CodeInvalidSigner

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender              => Int32 -1
      | CodeInsufficientFunds     => Int32 -2
      | CodeInsufficientAllowance => Int32 -3
      | CodeChequeVoid            => Int32 -4
      | CodeSignatureInvalid      => Int32 -5
      | CodeInvalidSigner         => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0
let two = Uint32 2
let hash_length = Uint32 320
let prefix = "0x"
(* Dummy user-defined ADT *)
type Unit =
| Unit

type Header =
| Header of (Pair ByStr33 ByStr20)

type Body =
| Body of (Pair Uint128 Uint128)

type Sig =
| Sig of (Pair Uint128 ByStr64)

type Cheque =
| Cheque of Header Body Sig (* pubkey, to, amount, fee, nonce, sig *)
(* ADTs (de)constructed for batching cheques. *)

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end
  
let map_fn = fun (cheque: Pair (Pair (Pair ByStr33 ByStr20) (Pair Uint128 Uint128)) (Pair Uint128 ByStr64)) =>
  match cheque with
  | Pair main tail =>
    match main with
    | Pair header body =>
      match header with
      | Pair pubkey to =>
        match body with
        | Pair amount fee =>
          match tail with
          | Pair nonce sig =>
            let h = Header header in
              let b = Body body in
                let t = Sig tail in
                  Cheque h b t
          end
        end
      end
    end
  end

let extract_from = 
  fun (pubkey: ByStr33) => 
    builtin schnorr_get_address pubkey
    
let hash_cheque =
  fun (to: ByStr20) =>
  fun (amount: Uint128) =>
  fun (fee: Uint128) =>
  fun (nonce:Uint128) =>
  fun (signature: ByStr64) =>
  fun (this_address: ByStr20) =>
      let to_hash = builtin sha256hash to in
      let amount_hash = builtin sha256hash amount in
      let contract_hash = builtin sha256hash this_address in
      let fee_hash = builtin sha256hash fee in
      let nonce_hash = builtin sha256hash nonce in
      let p0_hash = builtin concat to_hash amount_hash in
      let p1_hash = builtin concat p0_hash contract_hash in
      let p2_hash = builtin concat p1_hash fee_hash in
      let p3_hash = builtin concat p2_hash nonce_hash in
      builtin to_bystr p3_hash

let rehash = 
  fun (hash: ByStr) =>
    let hash_str = builtin to_string hash in
      let str = builtin substr hash_str two hash_length in
        let rehashed = builtin sha256hash str in
          builtin to_bystr rehashed

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract MetaFungibleToken
(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32,
  init_supply : Uint128
)

(* Mutable fields *)

field total_supply : Uint128 = init_supply

field balances: Map ByStr20 Uint128 
  = let emp_map = Emp ByStr20 Uint128 in
    builtin put emp_map contract_owner init_supply

field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)

field void_cheques: Map ByStr ByStr20
   = Emp ByStr ByStr20
(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[from];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    (* Subtract amount from from and add it to to address *)
    new_from_bal = builtin sub bal amount;
    balances[from] := new_from_bal;
    (* Adds amount to to address *)
    get_to_bal <- balances[to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[to] := new_to_bal
  | False =>
    (* Balance not sufficient *)
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

procedure IsChequeValid(hash: ByStr)
  cheque_invalid <- exists void_cheques[hash];
  match cheque_invalid with
  | True =>
    err = CodeChequeVoid;
    ThrowError err
  | False =>
  end
end

procedure IsValidSignature(pubkey: ByStr33, cheque_hash: ByStr, signature: ByStr64)
  valid_sig = builtin schnorr_verify pubkey cheque_hash signature;
  rehashed = rehash cheque_hash;
  valid_sig_rehashed = builtin schnorr_verify pubkey rehashed signature; (* for ZilPay sigs *)
  match valid_sig with
  | True =>
  | False =>
    match valid_sig_rehashed with
    | True =>
    | False =>
      err = CodeSignatureInvalid;
      ThrowError err
    end
  end
end

procedure ValidateAndClaim(cheque: Cheque)
  match cheque with
  | Cheque head body tail =>
    match head with
    | Header (Pair pubkey to) =>
      match body with
      | Body (Pair amount fee) =>
        match tail with
        | Sig (Pair nonce signature) =>
          hash = hash_cheque to amount fee nonce signature _this_address;
          from = extract_from pubkey;
          IsChequeValid hash;
          IsValidSignature pubkey hash signature;

          AuthorizedMoveIfSufficientBalance _sender from amount; (* recieve credit from _sender/relayer *)
          AuthorizedMoveIfSufficientBalance from _sender fee; (* pay fee for gas fronted by _sender/relayer *)
          void_cheques[hash] := _sender;
          e = {_eventname : "CreditSuccess"; initiator : _sender; sender: _sender; recipient : to; amount : amount; fee: fee};
          event e;
          (* Prevent sending to a contract address that does not support transfers of token *)
          msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
                              sender : _sender; recipient : to; amount : amount};
          msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                          sender : _sender; recipient : to; amount : amount};
          msgs = two_msgs msg_to_recipient msg_to_sender;
          send msgs
        end
      end
    end
  end
end

procedure ValidateAndCashCheque(cheque: Cheque)
  match cheque with
  | Cheque head body tail =>
    match head with
    | Header (Pair pubkey to) =>
      match body with
      | Body (Pair amount fee) =>
        match tail with
        | Sig (Pair nonce signature) =>
          hash = hash_cheque to amount fee nonce signature _this_address;
          from = extract_from pubkey;
          IsChequeValid hash;
          IsValidSignature pubkey hash signature;
          
          AuthorizedMoveIfSufficientBalance from to amount;
          AuthorizedMoveIfSufficientBalance from _sender fee;
          void_cheques[hash] := _sender;
          e = {_eventname : "ChequeSendSuccess"; initiator : _sender; sender: from; recipient : to; amount : amount};
          event e;
          (* Prevent sending to a contract address that does not support transfers of token *)
          msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: zero; 
                              initiator: _sender; sender : from; recipient: to; amount: amount};
          msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero; 
                          initiator: _sender; sender: from; recipient: to; amount: amount};
          msgs = two_msgs msg_to_recipient msg_to_sender;
          send msgs
        end
      end
    end
  end
end

procedure VoidCheque(cheque: Cheque)
  match cheque with
  | Cheque head body tail =>
    match head with
    | Header (Pair pubkey to) =>
      match body with
      | Body (Pair amount fee) =>
        match tail with
        | Sig (Pair nonce signature) =>
          hash = hash_cheque to amount fee nonce signature _this_address;
          from = extract_from pubkey;
        
          IsChequeValid hash;
          IsValidSignature pubkey hash signature;
          
          void_cheques[hash] := _sender;
          e = {_eventname : "ChequeVoidSuccess"; initiator : _sender; sender: from; recipient : to; amount : amount};
          event e
        end
      end
    end
  end
end

(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  AuthorizedMoveIfSufficientBalance _sender to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance from to amount;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed;
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: zero; 
                        initiator: _sender; sender : from; recipient: to; amount: amount};
    msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero; 
                    initiator: _sender; sender: from; recipient: to; amount: amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end

(* @dev: Moves amount tokens from _sender to recipient.                                                 *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.                          *)
(* @param pubkey:      Public Key of the recipient who is paying the fee, and recieving the credit      *)
(* @param to:          Address of the recipient whose balance is increased.                             *)
(* @param amount:      Amount of tokens to be sent.                                                     *)
(* @param fee:         Reward taken from the transfer recipients balance for the relayer, as they pay for the gas *)
(* @param nonce:       A random value included in the cheque to make each unique.                       *)
(* @param signature:   The signature of the cheque by the _sender to authorize spend.                   *)
transition Claim(pubkey: ByStr33, to: ByStr20, amount: Uint128, fee: Uint128, nonce:Uint128, signature: ByStr64)
  from = extract_from pubkey;
  cheque_hash = hash_cheque to amount fee nonce signature _this_address;
  IsChequeValid cheque_hash;
  IsValidSignature pubkey cheque_hash signature;
  
  AuthorizedMoveIfSufficientBalance _sender to amount;
  AuthorizedMoveIfSufficientBalance from _sender fee;
  
  void_cheques[cheque_hash] := _sender;
  e = {_eventname : "ClaimSuccess"; initiator : _sender; sender: _sender; recipient : to; amount : amount; fee : fee};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

transition BatchClaim(cheques: List (Pair (Pair (Pair ByStr33 ByStr20) (Pair Uint128 Uint128)) (Pair Uint128 ByStr64)))
  c =
    let map = @list_map (Pair (Pair (Pair ByStr33 ByStr20) (Pair Uint128 Uint128)) (Pair Uint128 ByStr64)) Cheque in
    map map_fn cheques;
  
  (* validate & distribute credits batched *)
  forall c ValidateAndClaim
end

(* @dev: Moves amount tokens from token_owner to recipient.                                             *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                      *)
(* @param pubkey:      Public Key of the token_owner whose balance is decreased.                        *)
(* @param to:          Address of the recipient whose balance is increased.                             *)
(* @param amount:      Amount of tokens to be sent.                                                     *)
(* @param fee:         Reward taken from the cheque senders balance for the relayer.                    *)
(* @param nonce:       A random value included in the cheque to make each unique.                       *)
(* @param signature:   The signature of the cheque by the token owner to authorize spend.               *)
transition ChequeSend(pubkey: ByStr33, to: ByStr20, amount: Uint128, fee: Uint128, nonce:Uint128, signature: ByStr64)
  from = extract_from pubkey;
  cheque_hash = hash_cheque to amount fee nonce signature _this_address;
  IsChequeValid cheque_hash;
  IsValidSignature pubkey cheque_hash signature;
  
  AuthorizedMoveIfSufficientBalance from to amount;
  AuthorizedMoveIfSufficientBalance from _sender fee;
  void_cheques[cheque_hash] := _sender;
  e = {_eventname : "ChequeSendSuccess"; initiator : _sender; sender: from; recipient : to; amount : amount};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

transition BatchChequeSend(cheques: List (Pair (Pair (Pair ByStr33 ByStr20) (Pair Uint128 Uint128)) (Pair Uint128 ByStr64)))
  c =
    let map = @list_map (Pair (Pair (Pair ByStr33 ByStr20) (Pair Uint128 Uint128)) (Pair Uint128 ByStr64)) Cheque in
    map map_fn cheques;
  
  (* validate & cash all cheques batched *)
  forall c ValidateAndCashCheque
end

(* @dev: Voids a cheque that _sender does not wish to be processed                                      *)
(* @dev: Balance of recipient will remain the same.                                                     *)
(* @param pubkey:      Public Key of the token_owner within the cheque.                                 *)
(* @param to:          Address of the recipient within the cheque.                                      *)
(* @param amount:      Amount of tokens which would have been sent within the cheque.                   *)
(* @param fee:         Reward to be taken from the cheque senders balance if the cheque was processed.  *)
(* @param nonce:       A random value included in the cheque to make each unique.                       *)
(* @param signature:   The signature of the cheque by the token owner that authorized the spend.        *)
transition ChequeVoid(pubkey: ByStr33, to: ByStr20, amount: Uint128, fee: Uint128, nonce: Uint128, signature: ByStr64)
  from = extract_from pubkey;
  cheque_hash = hash_cheque to amount fee nonce signature _this_address;
  IsChequeValid cheque_hash;
  IsValidSignature pubkey cheque_hash signature;

  void_cheques[cheque_hash] :=_sender;
  e = {_eventname : "ChequeVoidSuccess"; initiator : _sender; sender: from; recipient : to; amount : amount};
  event e
end

transition BatchChequeVoid(cheques: List (Pair (Pair (Pair ByStr33 ByStr20) (Pair Uint128 Uint128)) (Pair Uint128 ByStr64)))
  c =
    let map = @list_map (Pair (Pair (Pair ByStr33 ByStr20) (Pair Uint128 Uint128)) (Pair Uint128 ByStr64)) Cheque in
    map map_fn cheques;
  
  (* validate & void cheques batched *)
  forall c VoidCheque
end
