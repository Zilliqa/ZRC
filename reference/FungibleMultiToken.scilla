scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils
library FungibleMultiToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeTokenDoesNotExist

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender              => Int32 -1
      | CodeInsufficientFunds     => Int32 -2
      | CodeInsufficientAllowance => Int32 -3
      | CodeTokenDoesNotExist     => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0

(* Dummy user-defined ADT *)
type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleMultiToken
(
  contract_owner: ByStr20
)

(* Mutable fields *)

field max_token: Uint64 = Uint64 0

field total_supply : Map Uint64 Uint128 = Emp Uint64 Uint128

field balances: Map Uint64 (Map ByStr20 Uint128)
  = Emp Uint64 (Map ByStr20 Uint128)

field allowances: Map Uint64 (Map ByStr20 (Map ByStr20 Uint128))
  = Emp Uint64 (Map ByStr20 (Map ByStr20 Uint128))

field zrc2_to_token: Map ByStr20 Uint64 = Emp ByStr20 Uint64
field token_to_zrc2: Map Uint64 ByStr20 = Emp Uint64 ByStr20

field name : Map Uint64 String = Emp Uint64 String
field symbol : Map Uint64 String = Emp Uint64 String
field decimals : Map Uint64 Uint32 = Emp Uint64 Uint32
field init_supply : Map Uint64 Uint128 = Emp Uint64 Uint128

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure TokenDoesNotExist(token: Uint64)
  m <- max_token;
  e = builtin lt token m;
  match e with
  | True =>
  | False =>
    err = CodeTokenDoesNotExist;
    ThrowError err
  end
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure AuthorizedMoveIfSufficientBalance(token: Uint64, from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[token][from];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    (* Subtract amount from from and add it to to address *)
    new_from_bal = builtin sub bal amount;
    balances[token][from] := new_from_bal;
    (* Adds amount to to address *)
    get_to_bal <- balances[token][to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[token][to] := new_to_bal
  | False =>
    (* Balance not sufficient *)
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

(***************************************)
(*             Transitions             *)
(***************************************)

transition CreateZRC2BridgeToken(zrc2_contract: ByStr20, newName : String, newSymbol : String, newDecimals : Uint32)
  token <- max_token;
  new_max = let one = Uint64 1 in builtin add token one;
  max_token := new_max;
  name[token] := newName;
  symbol[token] := newSymbol;
  decimals[token] := newDecimals;
  total_supply[token] := zero; (* FIXME: https://github.com/Zilliqa/scilla/issues/901 *)
  init_supply[token] := zero;  (* FIXME: ditto *)
  zrc2_to_token[zrc2_contract] := token;
  token_to_zrc2[token] := zrc2_contract;
  e = {_eventname : "CreatedToken"; token_owner : _sender; token: token};
  event e
end

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(token: Uint64, spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  TokenDoesNotExist token;
  some_current_allowance <- allowances[token][_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[token][_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; token: token; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(token: Uint64, spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  TokenDoesNotExist token;
  some_current_allowance <- allowances[token][_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero
      end;
  allowances[token][_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; token: token; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(token: Uint64, to: ByStr20, amount: Uint128)
  TokenDoesNotExist token;
  AuthorizedMoveIfSufficientBalance token _sender to amount;
  e = {_eventname : "TransferSuccess"; token : token; sender : _sender; recipient : to; amount : amount};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _token: token; _recipient : to; _amount : zero; 
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _token: token; _recipient : _sender; _amount : zero; 
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(token: Uint64, from: ByStr20, to: ByStr20, amount: Uint128)
  TokenDoesNotExist token;
  o_spender_allowed <- allowances[token][from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance token from to amount;
    e = {_eventname : "TransferFromSuccess"; token: token; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[token][from][_sender] := new_allowed;
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _token: token; _recipient : to; _amount: zero; 
                        initiator: _sender; sender : from; recipient: to; amount: amount};
    msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _token: token; _recipient: _sender; _amount: zero; 
                    initiator: _sender; sender: from; recipient: to; amount: amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end

(* ZRC2 bridge *)

procedure DoAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
  o_token <- zrc2_to_token[_sender];
  match o_token with
  | Some token =>
    o_balance <- balances[token][sender];
    balance = get_val o_balance;
    balance = builtin add balance amount;
    balances[token][sender] := balance;
    o_our_total_supply <- total_supply[token];
    our_total_supply = get_val o_our_total_supply;
    our_total_supply = builtin add our_total_supply amount;
    total_supply[token] := our_total_supply;
    (* TODO: Should `minter` be `sender` or `_sender`? *)
    e = {_eventname: "Minted"; minter: sender; recipient: recipient; amount: amount};
    event e
  | None =>
    err = CodeTokenDoesNotExist;
    ThrowError err
  end
end

transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
  DoAcceptTransfer sender recipient amount
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender : ByStr20, recipient: ByStr20, amount: Uint128)
  DoAcceptTransfer sender recipient amount
end

transition Withdraw(token: Uint64, to: ByStr20, amount: Uint128)
  o_zrc2 <- token_to_zrc2[token];
  match o_zrc2 with
  | Some zrc2 =>
    o_balance <- balances[token][_sender];
    balance = get_val o_balance;
    balance = builtin sub balance amount;
    balances[token][_sender] := balance;
    o_our_total_supply <- total_supply[token];
    our_total_supply = get_val o_our_total_supply;
    our_total_supply = builtin sub our_total_supply amount;
    total_supply[token] := our_total_supply;
    msg = {_tag : "Transfer"; to : to; amount : amount; _amount : zero; _recipient : zrc2};
    msgs = one_msg msg;
    send msgs;
    (* TODO: Should `minter` be `sender` or `_sender`? *)
    e = {_eventname: "Burnt"; burner: _sender; burn_account: _sender; amount: amount};
    event e
  | None =>
    err = CodeTokenDoesNotExist;
    ThrowError err
  end
end