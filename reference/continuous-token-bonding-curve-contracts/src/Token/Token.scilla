scilla_version 0
(* 
  Authors: Mateusz Bednarski https://github.com/MszBednarski 
  and ZRC-2 standard people:
  https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-2.md
*)

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils
library Token

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeNotInitialized
| CodeAlreadyInitialized
| CodeInputNotInBounds
| CodeInputIsZero
| CodeUnauthorized
| CodeConnectorError
| CodeNotImplemented
| CodeSupplyOverflow

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender              => Int32 -1
      | CodeInsufficientFunds     => Int32 -2
      | CodeInsufficientAllowance => Int32 -3
      | CodeNotInitialized        => Int32 -4
      | CodeAlreadyInitialized    => Int32 -5
      | CodeInputNotInBounds      => Int32 -6
      | CodeInputIsZero           => Int32 -7
      | CodeUnauthorized          => Int32 -8
      | CodeConnectorError        => Int32 -9
      | CodeNotImplemented        => Int32 -10
      | CodeSupplyOverflow        => Int32 -11
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0
let zeroByStr20 = 0x0000000000000000000000000000000000000000
let false = False
let true = True

(* Dummy user-defined ADT *)
type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

let uint128_to_uint256: Uint128 -> Uint256 =
  fun (x: Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

(* calculates reserve ratio connector_balance*(fixed)//(marketcap*max) in ppm *)
let get_reserve_ratio: Uint128 -> Uint128 -> Uint128 =
  fun(connector_balance: Uint128) => fun(market_cap: Uint128) =>
  (* (math.pow(2,128)-1) *)
  let max = Uint256 340282366920938463463374607431768211456 in
  (* (math.pow(2,128)-1) * math.pow(10,6) *)
  let fixed = Uint256 340282366920938463463374607431768211456000000 in
  let connector_balance_256 = uint128_to_uint256 connector_balance in
  let market_cap_256 = uint128_to_uint256 market_cap in
  let denom = builtin mul market_cap_256 max in
  let num = builtin mul connector_balance_256 fixed in
  let res_256 = builtin div num denom in
  let ores_128 = builtin to_uint128 res_256 in
  match ores_128 with
  | None => 
    (* this must never happen div by zero ! *)
    let f2 = Uint128 42 in builtin div f2 zero
  | Some res_128 => res_128
  end


type ConnectorToken =
| ZIL
| ZRC2 of ByStr20 with contract field balances: Map ByStr20 Uint128 end 

let spread_denominator = Uint128 10000

type Uint128Pair =
| Uint128Pair of Uint128 Uint128
let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end
let muldiv: Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun (x : Uint128) =>
    fun (y : Uint128) =>
    fun (z : Uint128) =>
      let x256 = uint128_to_uint256 x in
      let y256 = uint128_to_uint256 y in
      let z256 = uint128_to_uint256 z in
      let x_mul_y256 = builtin mul x256 y256 in
      let res256 = builtin div x_mul_y256 z256 in
      let ores128 = builtin to_uint128 res256 in
      match ores128 with
      | None =>
        
        let max_uint128 = Uint128 340282366920938463463374607431768211455 in
        let fourtytwo128 = Uint128 42 in
        builtin mul max_uint128 fourtytwo128
      | Some res128 =>
        res128
      end
let take_percentage_commission: Uint128 -> Uint128 -> Uint128Pair =
    fun (amount: Uint128) => fun (spread_numerator: Uint128) =>
    let commission = muldiv amount spread_numerator spread_denominator in
    let amount_sub_commission = builtin sub amount commission in
    let res = Uint128Pair amount_sub_commission commission in
    res
(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Token
(
  contract_owner: ByStr20,
  name: String,
  symbol: String,
  decimals: Uint32,
  init_supply: Uint128,
  operator_contract: ByStr20 with contract field bancor_formula_contract: ByStr20, field spread: Uint128, field beneficiary: ByStr20 end
)

(* Mutable fields *)

field total_supply: Uint128 = init_supply
field current_supply: Uint128 = zero

field balances: Map ByStr20 Uint128 
  = Emp ByStr20 Uint128

field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)

field connector_token_type: ConnectorToken = ZIL

field is_init: Bool = false

(* used with procedure CalculateReserveRatio to calculate reserve ratio and retrieve it from this field *)
field tmp_reserve_ratio: Uint128 = zero

(* used with procedure GetConnectorBalance to get the connector balance! *)
field tmp_connector_balance: Uint128 = zero

(* the market cap of the smart token in terms of the connector token *)
field smart_token_market_cap: Uint128 = zero

(* used with GetFromBalance to get the from balance *)
field tmp_from_balance: Uint128 = zero

(* used with bancor formula contract to send the result of the calculation to the right user *)
(* @CalculatePurchaseReturnCallback  *)
field tmp_bancor_formula_target: ByStr20 = zeroByStr20

(* used with @Transfer and @TransferFrom to package transfer code into a procedure *)
field tmp_is_smart_token_sell: Bool = false

(* used with @TakeCommission to get the amount and commission numbers *)
field tmp_amount_and_commission: Uint128Pair = Uint128Pair zero zero

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IncrementCurrentSupply(amt: Uint128)
  cur <- current_supply;
  total <- total_supply;
  cur_add_amt = builtin add cur amt;
  supply_overflow = uint128_lt total cur_add_amt;
  match supply_overflow with
  | True => e = CodeSupplyOverflow; ThrowError e
  | False => current_supply := cur_add_amt
  end
end

procedure DecrementCurrentSupply(amt: Uint128)
  cur <- current_supply;
  total <- total_supply;
  cur_sub_amt = builtin sub cur amt;
  (* don't need to check underflow since scilla will throw if uint goes below zero *)
  current_supply := cur_sub_amt
end


procedure AssertIsInitialized()
  init <- is_init;
  match init with
  | True =>
  | False => e = CodeNotInitialized; ThrowError e
  end
end

procedure AssertIsNotInitialized()
  init <- is_init;
  match init with
  | False =>
  | True => e = CodeAlreadyInitialized; ThrowError e
  end
end

procedure AssertIsLE(i1: Uint128, i2: Uint128)
    is_le = uint128_le i1 i2;
    match is_le with
    | False => e = CodeInputNotInBounds; ThrowError e
    | True =>
    end
end

procedure AssertEQ(i1: Uint128, i2: Uint128)
    is_le = builtin eq i1 i2;
    match is_le with
    | False => e = CodeInputNotInBounds; ThrowError e
    | True =>
    end
end

procedure AssertNotZero(value: Uint128)
    is_zero = builtin eq zero value;
    match is_zero with
    | False => 
    | True => e = CodeInputIsZero; ThrowError e
    end
end

procedure AssertSenderIsAddress(address: ByStr20)
  is_authorized = builtin eq address _sender;
  match is_authorized with
  | True =>
  | False => e = CodeUnauthorized; ThrowError e
  end  
end


procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure GetConnectorBalance()
  connector <- connector_token_type;
  match connector with
  | ZIL =>
    connector_balance <- _balance;
    tmp_connector_balance := connector_balance
  | ZRC2 token_address =>
    o_connector_balance <-& token_address.balances[_this_address];
    match o_connector_balance with
    | Some connector_balance => 
      tmp_connector_balance := connector_balance 
    | None => e = CodeConnectorError; ThrowError e
    end
  end
end

(* 
  @dev: it also gets connector balance so dont need to double read if you used this!
  calculates the reserve ratio expressed in ppm
*)
procedure CalculateReserveRatio()
  market_cap <- smart_token_market_cap;
  GetConnectorBalance; connector_balance <- tmp_connector_balance;
  tmp = get_reserve_ratio connector_balance market_cap;
  tmp_reserve_ratio := tmp
end

procedure GetFromBalance(from: ByStr20)
  o_from_bal <- balances[from];
  bal = get_val o_from_bal;
  tmp_from_balance := bal
end


(* Throw CodeInsufficientFunds if transfer cannot be done *)
procedure AssertCanDoTransfer(from: ByStr20, from_balance: Uint128, amount: Uint128)
  can_do = uint128_le amount from_balance;
  match can_do with
  | True =>
  | False =>
    (* Balance not sufficient *)
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

procedure SubtractAmountFromFromBalance(from: ByStr20, from_balance: Uint128, amount: Uint128)
  new_from_bal = builtin sub from_balance amount;
  balances[from] := new_from_bal 
end

procedure AddAmountToToBalance(to: ByStr20, amount: Uint128)
  get_to_bal <- balances[to];
  new_to_bal = match get_to_bal with
  | Some bal => builtin add bal amount
  | None => amount
  end;
  balances[to] := new_to_bal
end

procedure MoveBalance(from: ByStr20, from_balance: Uint128, to: ByStr20, amount: Uint128)
  (* Subtract amount from from and add it to to address *)
  SubtractAmountFromFromBalance from from_balance amount;
  (* Adds amount to to address *)
  AddAmountToToBalance to amount
end

(* the result will be stored in the temp contract field: tmp_bancor_formula_result *)
(* READ INSTANTLY to make sure there is no other operations running in between calculate and result! *)
procedure CalculatePurchaseReturn(in_deposit_amount: Uint128)
  bancor <-& operator_contract.bancor_formula_contract;
  in_supply <- total_supply;
  (* Calculate reserve ratio also gets the connector balance *)
  CalculateReserveRatio; in_connector_weight <- tmp_reserve_ratio; in_connector_balance <- tmp_connector_balance;
  msg = let m = {
    _tag: "CalculatePurchaseReturn";
    _amount: zero;
    _recipient: bancor;
    in_supply: in_supply;
    in_connector_balance: in_connector_balance;
    in_connector_weight: in_connector_weight;
    in_deposit_amount: in_deposit_amount
  } in one_msg m;
  send msg
end
procedure CalculateSaleReturn(in_sell_amount: Uint128)
  bancor <-& operator_contract.bancor_formula_contract;
  in_supply <- total_supply;
  (* Calculate reserve ratio also gets the connector balance *)
  CalculateReserveRatio; in_connector_weight <- tmp_reserve_ratio; in_connector_balance <- tmp_connector_balance;
  msg = let m = {
    _tag: "CalculateSaleReturn";
    _amount: zero;
    _recipient: bancor;
    in_supply: in_supply;
    in_connector_balance: in_connector_balance;
    in_connector_weight: in_connector_weight;
    in_sell_amount: in_sell_amount
  } in one_msg m;
  send msg
end

procedure SendConnectedToken(to: ByStr20, amount: Uint128)
  connector <- connector_token_type;
  match connector with
  | ZRC2 token_address =>
    msg = let m = {
      _tag: "Transfer";
      _recipient: token_address;
      _amount: zero;
      to: to;
      amount: amount 
    } in one_msg m;
    send msg
  | ZIL =>
    msg = let m = { 
        _tag: "AddFunds";
        _recipient: to;
        _amount: amount
    } in one_msg m;
    send msg
  end
end

procedure TakeCommission(amount: Uint128)
  spread <-& operator_contract.spread;
  tmp = take_percentage_commission amount spread;
  tmp_amount_and_commission := tmp
end

procedure DoBuySmartToken(sender: ByStr20, deposit_amount: Uint128)
  tmp_bancor_formula_target := sender;
  CalculatePurchaseReturn deposit_amount
end

procedure BuySmartToken(sender: ByStr20, deposit_amount: Uint128)
  TakeCommission deposit_amount; amount_and_commission <- tmp_amount_and_commission;
  match amount_and_commission with
  | Uint128Pair new_amt commission =>
    is_zero = builtin eq commission zero;
    match is_zero with
    | True => DoBuySmartToken sender deposit_amount
    | False => 
      beneficiary <-& operator_contract.beneficiary;
      SendConnectedToken beneficiary commission;
      DoBuySmartToken sender new_amt
    end
  end
end

(***************************************)
(*             Transitions             *)
(***************************************)
(*
  @dev: Initializes the contract, the contract can be initalized only once
  @param price: the price of 1 uint of the token, not the conceptual 1 uint * 10^decimals
  but the literal 1 unit in terms of the connector token
  @param connector_balance: the initial balance of the connector that effectively sets the CW of the contract!
  where CW = connector_balance / (total_supply * price)
*)
transition InitZIL(price: Uint128, connector_balance: Uint128)
  AssertSenderIsAddress contract_owner;
  AssertIsNotInitialized;
  AssertNotZero connector_balance;
  (* if it overflows it means that it is too big! *)
  (* effectively the max market cap of this contract could be the market cap of ZIL *)
  supply <- total_supply;
  market_cap = builtin mul price supply;
  smart_token_market_cap := market_cap;
  AssertIsLE connector_balance market_cap;
  accept;
  tmp = ZIL;
  connector_token_type := tmp;
  bal <- _balance;
  (* if this is wrong there might have been an error while passing params *)
  AssertEQ bal connector_balance;
  is_init := true
end
(*
  @dev: Initializes the contract, the contract can be initalized only once
  @param price: the price of 1 uint of the token, not the conceptual 1 uint * 10^decimals
  but the literal 1 unit in terms of the connector token
  @param connector_balance: the initial balance of the connector that effectively sets the CW of the contract!
  where CW = connector_balance / (total_supply * price)
  @param token_address: if it is zeroByStr20 then ZIL connector token is assumed;
  tokens are going to be taken using the allowance mechanism
*)
transition InitZRC2(price: Uint128, connector_balance: Uint128, token_address: ByStr20 with contract field balances: Map ByStr20 Uint128 end)
  AssertSenderIsAddress contract_owner;
  AssertIsNotInitialized;
  AssertNotZero connector_balance;
  (* if it overflows it means that it is too big! *)
  (* effectively the max market cap of this contract could be the market cap of ZIL *)
  supply <- total_supply;
  market_cap = builtin mul price supply;
  smart_token_market_cap := market_cap;
  AssertIsLE connector_balance market_cap;
  tmp = ZRC2 token_address;
  connector_token_type := tmp;
  (* Assert EQ is done by the ZRC2 *)
  msg = let m = {
    _tag: "TransferFrom";
    _amount: zero;
    _recipient: token_address;
    from: _sender;
    to: _this_address;
    amount: connector_balance
  } in one_msg m;
  send msg
  (* is_init is set in the callback of the transfer from! *)
end

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  AssertIsInitialized;
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  AssertIsInitialized;
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

procedure DoTransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  GetFromBalance from; from_balance <- tmp_from_balance;
  AssertCanDoTransfer from from_balance amount;
  is_smart_token_sell = builtin eq to _this_address;
  tmp_is_smart_token_sell := is_smart_token_sell;
  match is_smart_token_sell with
  | True =>
    (* burn aka sell smart token *)
    SubtractAmountFromFromBalance from from_balance amount;
    DecrementCurrentSupply amount;
    (* send back connected token *)
    tmp_bancor_formula_target := from;
    CalculateSaleReturn amount
  | False =>
    MoveBalance from from_balance to amount
  end
end


(* @note: move to _this_address is now a smart token sell! *)
(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  AssertIsInitialized;
  DoTransferFrom _sender to amount; is_smart_token_sell <- tmp_is_smart_token_sell;
  (* emit the event in both cases to comply with the zrc2 standard *)
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  match is_smart_token_sell with
  | True => (* everything was done the token was burned *)
  | False =>
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
    sender : _sender; recipient : to; amount : amount};
    msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
    sender : _sender; recipient : to; amount : amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  end
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  AssertIsInitialized;
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    DoTransferFrom from to amount; is_smart_token_sell <- tmp_is_smart_token_sell;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed;
    match is_smart_token_sell with
    | True => (* everything was done *)
    | False =>
      (* Prevent sending to a contract address that does not support transfers of token *)
      msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: zero; 
                          initiator: _sender; sender : from; recipient: to; amount: amount};
      msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero; 
                      initiator: _sender; sender: from; recipient: to; amount: amount};
      msgs = two_msgs msg_to_recipient msg_to_sender;
      send msgs
    end
  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end

(*
  The scenarios for the following are:
  TokenConnector:
    This is a buy endpoint;
    Accept only messages from connectorToken
  ZILConnector:
    Reject All;
  this assumes that the connected token is not hostile implementation but actual
  zrc2 which makes sense given the issuer of the smart token is initiating
  thus recipient must be _this_address
*)
transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
  AssertIsInitialized;
  connector <- connector_token_type;
  match connector with
  | ZIL => e = CodeNotImplemented; ThrowError e
  | ZRC2 token_address =>
    AssertSenderIsAddress token_address;
    BuySmartToken sender amount
  end
end
transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128) 
  init <- is_init;
  match init with
  | False => (* special case only available during contract init zrc2 sequence, set the init status to True *)
    is_init := true
  | True =>
    (* general case act as buy endpoint *)
    connector <- connector_token_type;
    match connector with
    | ZIL => e = CodeNotImplemented; ThrowError e
    | ZRC2 token_address =>
      AssertSenderIsAddress token_address;
      BuySmartToken sender amount
    end 
  end
end
(* needed to send connector token to the smart token sellers! *)
transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128) 
  AssertIsInitialized
end
(* needed for contract init sequence! *)
transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128) 
  AssertIsInitialized 
end
(*
  The scenarios for the following are:
  TokenConnector:
    Reject All;
  ZILConnector:
    This is a buy endpoint
*)
transition AddFunds() 
  AssertIsInitialized;
  connector <- connector_token_type;
  match connector with
  | ZRC2 token_address => e = CodeNotImplemented; ThrowError e
  | ZIL =>
    prev_balance <- _balance;
    accept;
    cur_balance <- _balance;
    deposit_amount = builtin sub cur_balance prev_balance;
    BuySmartToken _sender deposit_amount
  end
end

(* people can call these and set them the tmp value field is updated when it is used anyway *)
(* those callbacks are called by the bancor formula contract and set the tmp result *)
(* essentially those are return values from the module that is the bancor formula *)
transition CalculatePurchaseReturnCallback(result: Uint128)
  target <- tmp_bancor_formula_target;
  bancor <-& operator_contract.bancor_formula_contract;
  AssertSenderIsAddress bancor;
  AddAmountToToBalance target result;
  IncrementCurrentSupply result
end

transition CalculateSaleReturnCallback(result: Uint128)
  target <- tmp_bancor_formula_target;
  bancor <-& operator_contract.bancor_formula_contract;
  AssertSenderIsAddress bancor;
  SendConnectedToken target result
end